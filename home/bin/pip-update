#!/usr/bin/env python

import os
import sys
import pip
import tempfile
import logging
import subprocess
from   pip.req    import parse_requirements

logging.basicConfig()
log = logging.getLogger()
env_root = os.getenv('VIRTUAL_ENV')

if sys.platform == 'win32':
    bin = 'Scripts'
else:
    bin = 'bin'


def save_strlist_to_tmpfile(str_values):
    """Return the path to the temp file"""
    try:
        with tempfile.NamedTemporaryFile(mode='w+t', delete=False) as temp:
            for item in str_values:
                temp.file.write("{}\n".format(item))
    except:
        log.exception('Error writing to temp file {}'.format(temp.name))
        raise
    finally:
        temp.file.close()

    return temp.name


def get_package_names(requirements_filepath):
    reqs = parse_requirements(requirements_filepath)
    return [req.name for req in reqs if req is not None]


class Piper(object):

    def __init__(self, pip_path):
        self._pip_path = pip_path

    @staticmethod
    def _check_output(args=[]):
        return subprocess.check_output(args).split()

    @staticmethod
    def _exec_comm(args=[]):
        return subprocess.call(args)

    @staticmethod
    def _append_to_comm(comm, args):
        if isinstance(comm, str):
            comm = [comm]

        if isinstance(args, list):
            comm.extend(args)
        elif isinstance(args, str):
            comm.append(args)

        return comm

    def _pip_exec(self, args, modules=[]):
        pip_comm = self._pip_path
        pip_comm = self._append_to_comm(pip_comm, args)
        pip_comm = self._append_to_comm(pip_comm, modules)
        print('Executing: ' + ' '.join(pip_comm))
        self._exec_comm(pip_comm)

    def install(self, modules=[]):
        self._pip_exec('install', modules)

    def upgrade(self, modules=[]):
        self._pip_exec(['install', '-U'], modules)

    def freeze(self):
        return self._check_output([self._pip_path, 'freeze'])


if __name__ == '__main__':
    if env_root is not None:
        pip_path = os.path.join(env_root, bin, 'pip')
    else:
        pip_path = sys.argv[1]

    mypip = Piper(pip_path)
    freeze_list = [pkg_str.decode() for pkg_str in mypip.freeze() if b'==' in pkg_str]
    env_packages = get_package_names(save_strlist_to_tmpfile(freeze_list))

    for pck_name in env_packages:
        print('Looking if update for {}.'.format(pck_name))
        mypip.upgrade(pck_name)
